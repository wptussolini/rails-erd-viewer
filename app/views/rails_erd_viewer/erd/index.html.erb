<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Rails ERD Viewer</title>
  <%= javascript_include_tag 'rails_erd_viewer/application' %>
  <%= csrf_meta_tags %>
</head>
<body style="margin: 0;">

<erd-editor automatic-layout system-dark-mode enable-theme-builder></erd-editor>
<script>
    const checkModuleSupport = () => 'supports' in HTMLScriptElement
        ? HTMLScriptElement.supports('module')
        : 'noModule' in document.createElement('script');

    const createScript = (src) => {
        return checkModuleSupport()
            ? import(src)
            : new Promise((resolve, reject) => {
                const script = document.createElement('script');
                script.onload = () => resolve();
                script.onerror = () => reject();
                script.src = src;
                document.body.appendChild(script);
            });
    };

    const loader = (src, fallback) => {
        return createScript(src).catch(() => createScript(fallback));
    };

    const sql = atob(`<%= @schema.to_s %>`)
    const editor = document.querySelector('erd-editor');

    if (checkModuleSupport()) {
        const scripts = [[
            'https://cdn.jsdelivr.net/npm/@dineug/erd-editor/+esm',
        ], [
            'https://cdn.jsdelivr.net/npm/@dineug/erd-editor-shiki-worker/+esm',
        ]].map(([src, fallback]) => loader(src, fallback));

        Promise.all(scripts)
            .then(([{ setGetShikiServiceCallback }, { getShikiService }]) => setGetShikiServiceCallback(getShikiService))
            .then(() => editor.setSchemaSQL(sql));
    } else {
        const scripts = [[
            'https://cdn.jsdelivr.net/npm/vuerd/dist/vuerd.min.js',
        ]].map(([src, fallback]) => loader(src, fallback));

        Promise.all(scripts).then(() => editor.loadSQLDDL(sql));
    }
</script>

</body>
</html>